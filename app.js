import { Agent } from '@intrnl/bluesky-client/agent';
import { html, render } from 'lit-html';
import { asyncAppend } from 'lit-html/directives/async-append.js';
import { replaceable } from './replaceable.js';

const PAGE_LIMIT = 100;

const e = Object.fromEntries([
	"login",
	"loginbutton",
	"loginhandle",
	"loginpassword",
	"postinput",
	"posturl",
	"getrepostersbutton",
	"getlikesbutton",
	"likers"
	].map(k => [k, document.getElementById(k)]));
window.e = e;

const agent = new Agent({ serviceUri: 'https://bsky.social' });

let curbox = e.login;
function setbox(newbox) {
	curbox.style.display = "none";
	newbox.style.display = "flex";
	curbox = newbox;
}

async function login(id, pass) {
	await agent.login({
		identifier: id,
		password: pass,
	});
	setbox(e.postinput);

	localStorage.setItem("handle", id);
	localStorage.setItem("password", pass);
}
e.loginbutton.addEventListener("click", () => login(e.loginhandle.value, e.loginpassword.value));

if (localStorage.getItem("password")) {
	login(localStorage.getItem("handle"), localStorage.getItem("password"));
}

const centerText = str => html`<center><p>${str}</p></center>`;
const [actionRow, replaceActionRow] = replaceable(centerText("Loading..."));

let likers = [];

async function getlikers(rpc, f) {
	const g = e.posturl.value.match(/https:\/\/bsky\.app\/profile\/(.+?)\/post\/(.+)/);

	let did = g[1];
	if (!g[1].startsWith("did:plc:")) {
		const res = await agent.rpc.get('com.atproto.identity.resolveHandle', {
			params: {
				handle: g[1]
			}
		});
		did = res.data.did;
	}

	async function fetchPage(cursor) {
		return await agent.rpc.get(rpc, {
			params: {
				uri: `at://${did}/app.bsky.feed.post/${g[2]}`,
				limit: PAGE_LIMIT,
				cursor: cursor,
			},
		});
	}

	async function* pages() {
		let res = await fetchPage();
		let page = f(res.data);
		console.log(res);

		yield* page;

		while (res.data.cursor && page.length >= PAGE_LIMIT) {
			res = await fetchPage(res.data.cursor);
			page = f(res.data);
			console.log(res);

			yield* page;
		}

		replaceActionRow(html`<div class="row">
			<button @click=${muteall}>mute all</button>
			<button @click=${blockall}>block all</button>
		</div>`);
	}

	async function* withCopyTo(arr, gen) {
		for await (const v of gen()) {
			arr.push(v);
			yield v;
		}
	}

	const profile = actor => html`<div class="profile">
			<img src=${actor.avatar} />
			<div>
				<p>${actor.displayName}<span style="padding-left:8px;color:gray">@${actor.handle}</span></p>
				<p>${actor.description}</p>
			</div>
		</div>`;

	const list = () => html`<div class="box" style="display:flex">
			${actionRow}
			${asyncAppend(withCopyTo(likers, pages), profile)}
		</div>`;

	render(list(), e.likers);
	setbox(e.likers);
}

e.getlikesbutton.addEventListener("click", () => getlikers('app.bsky.feed.getLikes', x => x.likes.map(l => l.actor)));
e.getrepostersbutton.addEventListener("click", () => getlikers('app.bsky.feed.getRepostedBy', x => x.repostedBy));

async function createAll(records) {
	records.forEach(r => {
		r['$type'] = 'com.atproto.repo.applyWrites#create';
	});

	const batchSize = 200;
	const amm = records.length;
	for (let i = 0; i < amm; i += batchSize) {
		await agent.rpc.call('com.atproto.repo.applyWrites', {
			data: {
				repo: agent.session.did,
				writes: records.slice(i, i + batchSize)
			}
		})
	}
}

async function recordExists(repo, collection, rkey) {
	try {
		await agent.rpc.get('com.atproto.repo.getRecord', {
			params: { repo, collection, rkey }
		})
		return true;
	} catch {
		return false;
	}
}

async function blockall() {
	let records = [];

	replaceActionRow(centerText("Processing..."));

	const createdAt = (new Date()).toISOString();
	const itemType = 'app.bsky.graph.block';

	likers.forEach(actor => {
		records.push({
			collection: itemType,
			value: {
				'$type': itemType,
				subject: actor.did,
				createdAt
			}
		});
	});

	replaceActionRow(centerText("Creating blocks..."));

	await createAll(records);

	replaceActionRow(centerText("Done!"));
}

async function muteall() {
	const repo = agent.session.did;
	let records = [];

	replaceActionRow(centerText("Processing..."));

	const createdAt = (new Date()).toISOString();

	const listType = 'app.bsky.graph.list';
	const listRkey = 'bblock';
	if (!(await recordExists(listType, 'bblock'))) {
		records.push({
			collection: listType,
			rkey: listRkey,
			value: {
				'$type': listType,
				purpose: 'app.bsky.graph.defs#modlist',
				name: listRkey,
				description: 'automatically generated by https://tentacle.expert/bblock/',
				createdAt
			}
		});
	}

	const list = `at://${repo}/${listType}/${listRkey}`;

	const itemType = 'app.bsky.graph.listitem';

	likers.forEach(actor => {
		if (!actor.viewer.muted) {
			records.push({
				collection: itemType,
				value: {
					'$type': itemType,
					subject: actor.did,
					list,
					createdAt
				}
			});
		}
	});

	replaceActionRow(centerText("Creating mutes..."));

	await createAll(records);

	replaceActionRow(centerText("Done!"));
}
