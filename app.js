import { Agent } from '@intrnl/bluesky-client/agent';
import { html, render } from 'lit-html';
import { asyncAppend } from 'lit-html/directives/async-append.js';
import { ref, createRef } from 'lit-html/directives/ref.js';
import { replaceable } from './replaceable.js';

const agent = new Agent({ serviceUri: 'https://bsky.social' });

const loginHandle = createRef();
const loginPassword = createRef();

// main starts as login
const [main, replaceMain] = replaceable(html`<div class="box" style="width:300px">
		<input ${ref(loginHandle)} type="text" name="handle" placeholder="handle">
		<input ${ref(loginPassword)} type="password" name="password" placeholder="password">
		<button @click=${() => login(loginHandle.value.value, loginPassword.value.value)}>login</button>
	</div>`);

render(html`${main}`, document.getElementById("maincontainer"));

const postInput = createRef();
const postInputBox = html`<div class="box">
		<input ${ref(postInput)} type="text" name="posturl" placeholder="post url">
		<div class="row">
			<button @click=${() => getlikers('app.bsky.feed.getRepostedBy', x => x.repostedBy)}>get reposters</button>
			<button @click=${() => getlikers('app.bsky.feed.getLikes', x => x.likes.map(l => l.actor))}>get likers</button>
		</div>
	</div>`;

async function login(id, pass) {
	await agent.login({
		identifier: id,
		password: pass,
	});

	replaceMain(postInputBox);

	localStorage.setItem("handle", id);
	localStorage.setItem("password", pass);
}

if (localStorage.getItem("password")) {
	login(localStorage.getItem("handle"), localStorage.getItem("password"));
}

async function getlikers(rpc, f) {
	const centerText = str => html`<center><p>${str}</p></center>`;
	const [actionRow, replaceActionRow] = replaceable(centerText("Loading..."));

	let likers = [];

	const g = postInput.value.value.match(/https:\/\/bsky\.app\/profile\/(.+?)\/post\/(.+)/);

	let did = g[1];
	if (!g[1].startsWith("did:plc:")) {
		const res = await agent.rpc.get('com.atproto.identity.resolveHandle', {
			params: {
				handle: g[1]
			}
		});
		did = res.data.did;
	}

	const PAGE_LIMIT = 100;
	async function fetchPage(cursor) {
		return await agent.rpc.get(rpc, {
			params: {
				uri: `at://${did}/app.bsky.feed.post/${g[2]}`,
				limit: PAGE_LIMIT,
				cursor: cursor,
			},
		});
	}

	async function* pages() {
		let res = await fetchPage();
		let page = f(res.data);
		console.log(res);

		yield* page;

		while (res.data.cursor && page.length >= PAGE_LIMIT) {
			res = await fetchPage(res.data.cursor);
			page = f(res.data);
			console.log(res);

			yield* page;
		}

		replaceActionRow(html`<div class="row">
			<button @click=${muteall}>mute all</button>
			<button @click=${blockall}>block all</button>
			<button @click=${() => replaceMain(postInputBox)}>back</button>
		</div>`);
	}

	async function* withCopyTo(arr, gen) {
		for await (const v of gen()) {
			arr.push(v);
			yield v;
		}
	}

	async function createAll(records) {
		records.forEach(r => {
			r['$type'] = 'com.atproto.repo.applyWrites#create';
		});

		const batchSize = 200;
		const amm = records.length;
		for (let i = 0; i < amm; i += batchSize) {
			await agent.rpc.call('com.atproto.repo.applyWrites', {
				data: {
					repo: agent.session.did,
					writes: records.slice(i, i + batchSize)
				}
			})
		}
	}

	async function recordExists(repo, collection, rkey) {
		try {
			await agent.rpc.get('com.atproto.repo.getRecord', {
				params: { repo, collection, rkey }
			})
			return true;
		} catch {
			return false;
		}
	}

	const doneRow = html`<div class="row">
			${centerText("Done!")}
			<button @click=${() => replaceMain(postInputBox)}>back</button>
		</div>`;

	async function blockall() {
		let records = [];

		replaceActionRow(centerText("Processing..."));

		const createdAt = (new Date()).toISOString();
		const itemType = 'app.bsky.graph.block';

		likers.forEach(actor => {
			records.push({
				collection: itemType,
				value: {
					'$type': itemType,
					subject: actor.did,
					createdAt
				}
			});
		});

		replaceActionRow(centerText("Creating blocks..."));

		await createAll(records);

		replaceActionRow(doneRow);
	}

	async function muteall() {
		const repo = agent.session.did;
		let records = [];

		replaceActionRow(centerText("Processing..."));

		const createdAt = (new Date()).toISOString();

		const listType = 'app.bsky.graph.list';
		const listRkey = 'bblock';
		if (!(await recordExists(repo, listType, 'bblock'))) {
			records.push({
				collection: listType,
				rkey: listRkey,
				value: {
					'$type': listType,
					purpose: 'app.bsky.graph.defs#modlist',
					name: listRkey,
					description: 'automatically generated by https://tentacle.expert/bblock/',
					createdAt
				}
			});
		}

		const list = `at://${repo}/${listType}/${listRkey}`;

		const itemType = 'app.bsky.graph.listitem';

		likers.forEach(actor => {
			if (!actor.viewer.muted) {
				records.push({
					collection: itemType,
					value: {
						'$type': itemType,
						subject: actor.did,
						list,
						createdAt
					}
				});
			}
		});

		replaceActionRow(centerText("Creating mutes..."));

		await createAll(records);

		replaceActionRow(doneRow);
	}

	const profile = actor => html`<div class="profile">
			<img src=${actor.avatar} />
			<div>
				<p>${actor.displayName}<span style="padding-left:8px;color:gray">@${actor.handle}</span></p>
				<p>${actor.description}</p>
			</div>
		</div>`;

	replaceMain(html`<div class="box" style="display:flex">
			${actionRow}
			${asyncAppend(withCopyTo(likers, pages), profile)}
		</div>`);
}


